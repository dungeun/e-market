const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/commerce_plugin'
});

async function addCategoryTranslations() {
  const categoryTranslations = [
    {
      key: 'beauty',
      namespace: 'category',
      translations: {
        ko: 'Î∑∞Ìã∞',
        en: 'Beauty',
        jp: '„Éì„É•„Éº„ÉÜ„Ç£„Éº'
      }
    },
    {
      key: 'electronics',
      namespace: 'category',
      translations: {
        ko: 'Ï†ÑÏûêÏ†úÌíà',
        en: 'Electronics',
        jp: 'ÈõªÂ≠êË£ΩÂìÅ'
      }
    },
    {
      key: 'food',
      namespace: 'category',
      translations: {
        ko: 'ÏãùÌíà',
        en: 'Food',
        jp: 'È£üÂìÅ'
      }
    },
    {
      key: 'travel',
      namespace: 'category',
      translations: {
        ko: 'Ïó¨Ìñâ',
        en: 'Travel',
        jp: 'ÊóÖË°å'
      }
    },
    {
      key: 'fashion',
      namespace: 'category',
      translations: {
        ko: 'Ìå®ÏÖò',
        en: 'Fashion',
        jp: '„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥'
      }
    },
    {
      key: 'sports',
      namespace: 'category',
      translations: {
        ko: 'Ïä§Ìè¨Ï∏†',
        en: 'Sports',
        jp: '„Çπ„Éù„Éº„ÉÑ'
      }
    },
    {
      key: 'lifestyle',
      namespace: 'category',
      translations: {
        ko: 'ÎùºÏù¥ÌîÑÏä§ÌÉÄÏùº',
        en: 'Lifestyle',
        jp: '„É©„Ç§„Éï„Çπ„Çø„Ç§„É´'
      }
    },
    {
      key: 'health',
      namespace: 'category',
      translations: {
        ko: 'Í±¥Í∞ï',
        en: 'Health',
        jp: 'ÂÅ•Â∫∑'
      }
    },
    {
      key: 'baby',
      namespace: 'category',
      translations: {
        ko: 'Ïú°ÏïÑ',
        en: 'Baby & Kids',
        jp: 'ËÇ≤ÂÖê'
      }
    },
    {
      key: 'game',
      namespace: 'category',
      translations: {
        ko: 'Í≤åÏûÑ',
        en: 'Gaming',
        jp: '„Ç≤„Éº„É†'
      }
    },
    {
      key: 'insurance',
      namespace: 'category',
      translations: {
        ko: 'Î≥¥Ìóò',
        en: 'Insurance',
        jp: '‰øùÈô∫'
      }
    },
    {
      key: 'cart',
      namespace: 'category',
      translations: {
        ko: 'ÏáºÌïë',
        en: 'Shopping',
        jp: '„Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞'
      }
    },
    {
      key: 'warning',
      namespace: 'category',
      translations: {
        ko: 'Ï£ºÏùòÏÇ¨Ìï≠',
        en: 'Warnings',
        jp: 'Ê≥®ÊÑè‰∫ãÈ†Ö'
      }
    },
    {
      key: 'mobile',
      namespace: 'category',
      translations: {
        ko: 'Î™®Î∞îÏùº',
        en: 'Mobile',
        jp: '„É¢„Éê„Ç§„É´'
      }
    },
    {
      key: 'book',
      namespace: 'category',
      translations: {
        ko: 'ÎèÑÏÑú',
        en: 'Books',
        jp: 'Êõ∏Á±ç'
      }
    },
    {
      key: 'home',
      namespace: 'category',
      translations: {
        ko: 'Ìôà/Î¶¨Îπô',
        en: 'Home & Living',
        jp: '„Éõ„Éº„É†ÔºÜ„É™„Éì„É≥„Ç∞'
      }
    }
  ];

  console.log('üåê Adding category translations to database...');

  try {
    // Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
    await pool.query('BEGIN');

    for (const item of categoryTranslations) {
      // Í∞Å Ïñ∏Ïñ¥Î≥ÑÎ°ú Î≥ÑÎèÑÏùò Î†àÏΩîÎìú ÏÇΩÏûÖ
      for (const [langCode, value] of Object.entries(item.translations)) {
        const id = `${langCode}_${item.namespace}_${item.key}`;
        const query = `
          INSERT INTO language_packs (id, "languageCode", namespace, key, value, "createdAt", "updatedAt")
          VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
          ON CONFLICT (id) 
          DO UPDATE SET 
            value = $5,
            "updatedAt" = NOW()
        `;

        await pool.query(query, [
          id,
          langCode,
          item.namespace,
          item.key,
          value
        ]);

        console.log(`‚úÖ Added/Updated: ${langCode}.${item.namespace}.${item.key} = ${value}`);
      }
    }

    // Ìä∏ÎûúÏû≠ÏÖò Ïª§Î∞ã
    await pool.query('COMMIT');
    
    console.log('\n‚úÖ All category translations added successfully!');
    
    // ÌôïÏù∏
    const result = await pool.query(`
      SELECT key, translations 
      FROM language_packs 
      WHERE namespace = 'category'
      ORDER BY key
    `);
    
    console.log('\nüìã Current category translations:');
    result.rows.forEach(row => {
      console.log(`${row.key}: ${JSON.stringify(row.translations)}`);
    });

  } catch (error) {
    await pool.query('ROLLBACK');
    console.error('‚ùå Error adding category translations:', error);
  } finally {
    await pool.end();
  }
}

addCategoryTranslations().catch(console.error);