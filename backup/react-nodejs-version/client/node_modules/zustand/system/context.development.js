System.register(['react', 'zustand/traditional'], (function (exports) {
  'use strict';
  var ReactExports, useStoreWithEqualityFn;
  return {
    setters: [function (module) {
      ReactExports = module.default;
    }, function (module) {
      useStoreWithEqualityFn = module.useStoreWithEqualityFn;
    }],
    execute: (function () {

      exports("default", createContext);

      const {
        createElement,
        createContext: reactCreateContext,
        useContext,
        useMemo,
        useRef
      } = ReactExports;
      function createContext() {
        {

        }
        const ZustandContext = reactCreateContext(void 0);
        const Provider = ({
          createStore,
          children
        }) => {
          const storeRef = useRef();
          if (!storeRef.current) {
            storeRef.current = createStore();
          }
          return createElement(
            ZustandContext.Provider,
            { value: storeRef.current },
            children
          );
        };
        const useContextStore = (selector, equalityFn) => {
          const store = useContext(ZustandContext);
          if (!store) {
            throw new Error(
              "Seems like you have not used zustand provider as an ancestor."
            );
          }
          return useStoreWithEqualityFn(
            store,
            selector,
            equalityFn
          );
        };
        const useStoreApi = () => {
          const store = useContext(ZustandContext);
          if (!store) {
            throw new Error(
              "Seems like you have not used zustand provider as an ancestor."
            );
          }
          return useMemo(() => ({ ...store }), [store]);
        };
        return {
          Provider,
          useStore: useContextStore,
          useStoreApi
        };
      }

    })
  };
}));
