version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: commerce-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: commerce_db
      POSTGRES_USER: commerce_user
      POSTGRES_PASSWORD: commerce_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - commerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U commerce_user -d commerce_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: commerce-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - commerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: commerce-app-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: "postgresql://commerce_user:commerce_password@postgres:5432/commerce_db"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: "development-jwt-secret-change-in-production"
      PORT: 3000
    ports:
      - "3000:3000"
      - "9229:9229" # Debug port
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - commerce_network
    command: npm run dev

  # Prisma Studio (Database GUI)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: commerce-prisma-studio
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://commerce_user:commerce_password@postgres:5432/commerce_db"
    ports:
      - "5555:5555"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - commerce_network
    command: npx prisma studio --hostname 0.0.0.0

  # MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: commerce-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - commerce_network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: commerce-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - commerce_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  commerce_network:
    driver: bridge