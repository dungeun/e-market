import client from 'prom-client';
export declare const register: client.Registry<"text/plain; version=0.0.4; charset=utf-8">;
export declare const httpRequestDuration: client.Histogram<"path" | "method" | "status_code">;
export declare const httpRequestsTotal: client.Counter<"path" | "status" | "method">;
export declare const activeUsers: client.Gauge<string>;
export declare const databaseConnections: client.Gauge<string>;
export declare const redisConnections: client.Gauge<string>;
export declare const ordersCompleted: client.Counter<string>;
export declare const ordersCreated: client.Counter<string>;
export declare const ordersByStatus: client.Gauge<"status">;
export declare const cartCreated: client.Counter<string>;
export declare const cartAbandoned: client.Counter<string>;
export declare const revenue: client.Counter<string>;
export declare const productRevenue: client.Counter<"product_id" | "product_name">;
export declare const paymentAttempts: client.Counter<"method" | "gateway">;
export declare const paymentSuccess: client.Counter<"method" | "gateway">;
export declare const paymentFailures: client.Counter<"method" | "gateway" | "error_code">;
export declare const userRegistrations: client.Counter<string>;
export declare const userLogins: client.Counter<string>;
export declare const sessionCreated: client.Counter<string>;
export declare const sessionTimeouts: client.Counter<string>;
export declare const searchRequests: client.Counter<string>;
export declare const searchNoResults: client.Counter<string>;
export declare const productInventoryLevel: client.Gauge<"product_id" | "product_name">;
export declare const apiErrors: client.Counter<"endpoint" | "status_code" | "error_type">;
export declare const cacheHits: client.Counter<"cache_type">;
export declare const cacheMisses: client.Counter<"cache_type">;
export declare const emailsSent: client.Counter<"type" | "status">;
export declare const webhookEvents: client.Counter<"status" | "event_type">;
export declare class MetricsService {
    static recordHttpRequest(method: string, path: string, statusCode: number, duration: number): void;
    static recordOrderCompleted(_orderId: string, amount: number): void;
    static recordOrderCreated(): void;
    static updateOrderStatus(status: string, count: number): void;
    static recordCartCreated(): void;
    static recordCartAbandoned(): void;
    static recordProductRevenue(productId: string, productName: string, amount: number): void;
    static recordPaymentAttempt(gateway: string, method: string): void;
    static recordPaymentSuccess(gateway: string, method: string): void;
    static recordPaymentFailure(gateway: string, method: string, errorCode: string): void;
    static recordUserRegistration(): void;
    static recordUserLogin(): void;
    static recordSessionCreated(): void;
    static recordSessionTimeout(): void;
    static recordSearchRequest(): void;
    static recordSearchNoResults(): void;
    static updateProductInventory(productId: string, productName: string, level: number): void;
    static recordApiError(endpoint: string, errorType: string, statusCode: number): void;
    static recordCacheHit(cacheType: string): void;
    static recordCacheMiss(cacheType: string): void;
    static recordEmailSent(type: string, status: string): void;
    static recordWebhookEvent(eventType: string, status: string): void;
    static setActiveUsers(count: number): void;
    static setDatabaseConnections(count: number): void;
    static setRedisConnections(count: number): void;
    static getHealthMetrics(): Promise<string>;
    static getBusinessMetrics(): Promise<string>;
}
export default MetricsService;
//# sourceMappingURL=metricsService.d.ts.map