generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== 사용자 관련 (main_page + 기존 통합) =====
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  password   String? // 소셜 로그인 시 null
  image      String?
  
  // main_page에서 추가된 필드
  type          UserType     @default(USER)
  status        UserStatus   @default(ACTIVE)
  verified      Boolean      @default(false)
  isOnboarded   Boolean      @default(false)
  lastLoginAt   DateTime?
  deletedAt     DateTime?
  
  // 기존 필드들
  role       UserRole @default(USER)
  provider   String? // google, naver, kakao, credentials
  providerId String? // 소셜 로그인 provider ID

  emailVerified DateTime?
  phone         String?
  phoneVerified Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  profile       UserProfile?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart?
  addresses     Address[]
  reviews       Review[]
  wishlist      Wishlist[]
  notifications Notification[]
  points        Point[]
  coupons       UserCoupon[]

  // Enterprise Relations
  businessAccount        BusinessAccount?
  inventoryReservations  InventoryReservation[]
  customerSegmentMembers CustomerSegmentMember[]
  displayEvents          DisplayEvent[]
  abTestAssignments      ABTestAssignment[]

  // Banking Relations
  bankAccounts BankAccount[]

  @@index([email])
  @@index([provider, providerId])
  @@index([type, status])
}

// main_page의 UserType enum 추가
enum UserType {
  USER
  ADMIN
  MODERATOR
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

// 기존 UserRole enum 유지 (호환성)
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model UserProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  bio             String?
  profileImage    String?
  phoneNumber     String?
  address         String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("user_profiles")
}

// ===== UI 설정 관련 모델 (main_page에서 추가) =====

model UISection {
  id          String      @id @default(cuid())
  key         String      @unique
  title       String?
  type        String
  isActive    Boolean     @default(true)
  order       Int         @default(0)
  data        Json?
  props       Json?
  style       Json?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  texts       UIText[]
  
  @@index([key])
  @@index([isActive])
  @@map("ui_sections")
}

model UIText {
  id          String      @id @default(cuid())
  sectionId   String
  section     UISection   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  key         String
  language    String      @default("ko")
  text        String      @db.Text
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([sectionId, key, language])
  @@index([language])
  @@map("ui_texts")
}

// ===== 언어팩 관련 모델 (main_page에서 추가) =====

model LanguagePack {
  id            String      @id @default(cuid())
  languageCode  String
  namespace     String
  key           String
  value         String      @db.Text
  description   String?
  category      String?
  isActive      Boolean     @default(true)
  version       Int         @default(1)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  updatedBy     String?
  
  metadata      Json?
  
  @@unique([languageCode, namespace, key])
  @@index([languageCode, namespace])
  @@index([languageCode, isActive])
  @@index([category])
  @@map("language_packs")
}

model TranslationSettings {
  id                  String    @id @default(cuid())
  
  // 기본 설정
  defaultLanguage     String    @default("ko")
  fallbackLanguage    String    @default("en")
  enabledLanguages    String[]  @default(["ko", "en", "ja", "zh", "es", "pt", "fr", "de", "it", "ru"])
  
  // 자동 번역 설정
  autoTranslate       Boolean   @default(false)
  translationService  String?   // google, deepl, azure 등
  apiKey             String?
  
  // 캐시 설정
  cacheEnabled        Boolean   @default(true)
  cacheTTL            Int       @default(3600) // seconds
  
  // 기타 설정
  showMissingKeys     Boolean   @default(false)
  missingKeyPrefix    String    @default("[MISSING]")
  
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  @@map("translation_settings")
}

// ===== 메뉴 및 네비게이션 (main_page에서 추가) =====

model MenuItem {
  id          String      @id @default(cuid())
  key         String      @unique
  parentId    String?
  parent      MenuItem?   @relation("MenuHierarchy", fields: [parentId], references: [id])
  children    MenuItem[]  @relation("MenuHierarchy")
  
  label       Json        // 다국어 라벨 { ko: "홈", en: "Home", ... }
  href        String?
  icon        String?
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  isExternal  Boolean     @default(false)
  target      String?     // _blank, _self 등
  
  // 권한 관련
  requiredRole UserType[]  @default([])
  isPublic     Boolean     @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([isActive, order])
  @@map("menu_items")
}

// NextAuth 관련 모델들
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ===== 상품 관련 =====
model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String? @db.Text
  price       Int
  compareAt   Int? // 할인 전 가격
  cost        Int? // 원가
  sku         String? @unique
  barcode     String?

  stock          Int     @default(0)
  trackStock     Boolean @default(true)
  allowBackorder Boolean @default(false)

  weight Float?
  width  Float?
  height Float?
  depth  Float?

  images     ProductImage[]
  categoryId String?
  category   Category?      @relation(fields: [categoryId], references: [id])

  tags   String[]
  status ProductStatus @default(DRAFT)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  variants        ProductVariant[]
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  displaySections DisplaySection[]
  displayEvents   DisplayEvent[]

  // Enterprise Relations
  priceRules            PriceRule[]
  bulkOrderItems        BulkOrderItem[]
  inventoryTransfers    InventoryTransfer[]
  inventorySnapshots    InventorySnapshot[]
  inventoryReservations InventoryReservation[]

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  Inventory       Inventory[]

  @@index([slug])
  @@index([sku])
  @@index([categoryId])
  @@index([status])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  position  Int     @default(0)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  name  String
  sku   String @unique
  price Int
  stock Int    @default(0)

  options Json // { color: "red", size: "M" }
  image   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([sku])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  parent      Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryTree")
  products    Product[]

  // Enterprise Relations
  priceRules PriceRule[]

  position Int     @default(0)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([parentId])
}

// ===== 주문 관련 =====
model Order {
  id          String  @id @default(cuid())
  orderNumber String  @unique
  userId      String?
  user        User?   @relation(fields: [userId], references: [id])

  // 주문 정보
  status OrderStatus @default(PENDING)
  items  OrderItem[]

  // 금액
  subtotal Int
  tax      Int @default(0)
  shipping Int @default(0)
  discount Int @default(0)
  total    Int

  // 배송 정보
  shippingAddress Json
  billingAddress  Json?

  // 결제 정보
  payment Payment?

  // Enterprise Relations
  taxInvoice        TaxInvoice?
  creditHistory     CreditHistory[]
  displayEvents     DisplayEvent[]
  corporatePayments CorporatePayment[]

  // 추적 정보
  trackingNumber String?
  carrier        String?

  notes String?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  InventoryReservation InventoryReservation[]

  @@index([orderNumber])
  @@index([userId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PAYMENT_PENDING // 결제 대기
  PAYMENT_COMPLETED // 결제 완료
  PAYMENT_FAILED // 결제 실패
  PROCESSING // 처리중
  SHIPPED // 배송중
  DELIVERED // 배송완료
  CANCELLED // 취소됨
  REFUNDED // 환불됨
  PARTIAL_REFUND // 부분환불
}

// 주문에 paymentStatus와 paymentMethod 추가 필요하지만 기존 스키마 유지

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  name     String
  sku      String?
  price    Int
  quantity Int
  variant  Json?

  @@index([orderId])
  @@index([productId])
}

// ===== 결제 관련 =====
model Payment {
  id      String @id @default(cuid())
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])

  provider String // TOSS_PAYMENTS, KCP, INICIS, etc.
  method   PaymentMethod
  status   PaymentStatus @default(PENDING)

  amount   Int
  currency String @default("KRW")

  // PG사 정보
  paymentKey    String? @unique
  transactionId String?
  approvalUrl   String?

  // 결제 응답 데이터
  responseData Json?
  metadata     Json?
  errorMessage String?

  paidAt      DateTime?
  completedAt DateTime?
  failedAt    DateTime?
  cancelledAt DateTime?
  refundedAt  DateTime?

  failReason   String?
  cancelReason String?
  refundReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  refunds Refund[]

  @@index([paymentKey])
  @@index([status])
  @@index([provider])
}

model Refund {
  id        String  @id @default(cuid())
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])

  amount Int
  reason String
  status RefundStatus @default(PENDING)

  approvedBy  String?
  approvedAt  DateTime?
  completedAt DateTime?

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentId])
  @@index([status])
}

enum RefundStatus {
  PENDING
  APPROVED
  COMPLETED
  REJECTED
  FAILED
}

model WebhookLog {
  id          String   @id @default(cuid())
  webhookId   String   @unique // External webhook ID for deduplication
  provider    String
  payload     Json
  processedAt DateTime

  createdAt DateTime @default(now())

  @@index([provider])
  @@index([processedAt])
}

enum PaymentMethod {
  CARD // 신용/체크카드
  VIRTUAL_ACCOUNT // 가상계좌
  TRANSFER // 계좌이체
  MOBILE // 휴대폰
  CULTURE_GIFT // 문화상품권
  BOOK_GIFT // 도서상품권
  GAME_GIFT // 게임상품권
  TOSS_PAY // 토스페이
  SAMSUNG_PAY // 삼성페이
  EASY_PAY // 간편결제
}

enum PaymentStatus {
  PENDING // 대기중
  READY // 준비됨
  IN_PROGRESS // 진행중
  COMPLETED // 완료
  CANCELLED // 취소됨
  PARTIAL_REFUND // 부분환불
  FAILED // 실패
  EXPIRED // 만료
}

// ===== 장바구니 =====
model Cart {
  id        String  @id @default(cuid())
  userId    String? @unique
  user      User?   @relation(fields: [userId], references: [id])
  sessionId String? @unique // 비회원용

  items CartItem[]

  // Enterprise Relations
  inventoryReservations InventoryReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model CartItem {
  id     String @id @default(cuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int
  variant  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

// ===== 위시리스트 =====
model Wishlist {
  id     String         @id @default(cuid())
  userId String         @unique
  user   User           @relation(fields: [userId], references: [id])
  items  WishlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}

// ===== 리뷰 =====
model Review {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  rating  Int // 1-5
  title   String?
  content String?  @db.Text
  images  String[]

  helpful  Int     @default(0)
  verified Boolean @default(false) // 구매 확인

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@index([rating])
}

// ===== 주소 =====
model Address {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  name  String
  phone String

  postalCode String
  address    String
  detail     String?

  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// ===== 알림 =====
model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  type    NotificationType
  title   String
  content String
  data    Json?

  isRead Boolean   @default(false)
  readAt DateTime?

  // 알림톡 발송 정보
  alimtalkSent      Boolean   @default(false)
  alimtalkSentAt    DateTime?
  alimtalkMessageId String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([type])
}

enum NotificationType {
  ORDER_PLACED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  REVIEW_REQUEST
  COUPON_EXPIRE
  POINT_EXPIRE
  PRICE_DROP
  BACK_IN_STOCK
  SYSTEM
}

// ===== 포인트 =====
model Point {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  amount      Int
  balance     Int
  type        PointType
  description String

  orderId   String?
  expiresAt DateTime?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
}

enum PointType {
  EARNED // 적립
  USED // 사용
  EXPIRED // 만료
  CANCELLED // 취소
  ADMIN // 관리자 지급
}

// ===== 쿠폰 =====
model Coupon {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  type  CouponType
  value Int // 금액 또는 퍼센트

  minAmount   Int? // 최소 주문 금액
  maxDiscount Int? // 최대 할인 금액 (퍼센트 쿠폰용)

  usageLimit Int? // 전체 사용 한도
  usageCount Int  @default(0)

  startsAt  DateTime
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserCoupon[]

  @@index([code])
}

enum CouponType {
  FIXED // 정액 할인
  PERCENTAGE // 정률 할인
}

model UserCoupon {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id])

  usedAt  DateTime?
  orderId String?

  createdAt DateTime @default(now())

  @@unique([userId, couponId])
  @@index([userId])
  @@index([couponId])
}

// ===== 시스템 설정 (main_page + 기존 통합) =====

// main_page의 SystemConfig
model SystemConfig {
  id          String      @id @default(cuid())
  key         String      @unique
  value       Json
  type        String      // string, number, boolean, json
  category    String      // general, email, payment, etc
  description String?
  isPublic    Boolean     @default(false)
  isEditable  Boolean     @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([category])
  @@index([key])
  @@map("system_configs")
}

// 기존의 BusinessMode Config는 별도로 유지
model BusinessModeConfig {
  id           String       @id @default(cuid())
  businessMode BusinessMode @default(B2C)
  features     Json // Feature flags
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("business_mode_config")
}

// Site Configuration (UI Config, Settings, etc.)
model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_config")
}

// ===== ENTERPRISE FEATURES =====

// B2B/B2C MODE CONFIGURATION
enum BusinessMode {
  B2C
  B2B
  HYBRID
}

// B2B FEATURES
model BusinessAccount {
  id               String         @id @default(cuid())
  userId           String         @unique
  businessNumber   String         @unique // 사업자등록번호
  companyName      String
  representative   String // 대표자명
  businessType     String // 업태
  businessCategory String // 종목
  businessAddress  String // 사업장 주소
  taxInvoiceEmail  String // 세금계산서 이메일
  verified         Boolean        @default(false)
  verifiedAt       DateTime?
  creditLimit      Decimal        @default(0) // 외상 한도
  currentCredit    Decimal        @default(0) // 현재 외상액
  paymentTerms     Int            @default(30) // 결제 조건 (일)
  discountRate     Decimal        @default(0) // 기본 할인율
  tier             BusinessTier   @default(BRONZE)
  status           BusinessStatus @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  invoices          TaxInvoice[]
  priceGroups       PriceGroupMember[]
  bulkOrders        BulkOrder[]
  creditHistories   CreditHistory[]
  bankAccounts      BankAccount[]
  corporatePayments CorporatePayment[]

  @@index([businessNumber])
  @@index([status])
  @@map("business_accounts")
}

enum BusinessTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  VIP
}

enum BusinessStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

model TaxInvoice {
  id            String  @id @default(cuid())
  invoiceNumber String  @unique
  orderId       String? @unique

  // 공급자 정보
  supplierBusinessNo       String
  supplierCompanyName      String
  supplierCeoName          String
  supplierAddress          String
  supplierBusinessType     String?
  supplierBusinessCategory String?

  // 공급받는자 정보
  buyerBusinessNo       String
  buyerCompanyName      String
  buyerCeoName          String
  buyerAddress          String
  buyerEmail            String?
  buyerBusinessType     String?
  buyerBusinessCategory String?

  // 금액 정보
  supplyAmount Decimal
  taxAmount    Decimal
  totalAmount  Decimal

  // 상태 및 처리 정보
  status           TaxInvoiceStatus @default(DRAFT)
  issueDate        DateTime
  ntsSendDate      DateTime?
  ntsResultCode    String?
  ntsResultMessage String?

  // 메타데이터
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order             Order?           @relation(fields: [orderId], references: [id])
  items             TaxInvoiceItem[]
  BusinessAccount   BusinessAccount? @relation(fields: [businessAccountId], references: [id])
  businessAccountId String?

  @@index([invoiceNumber])
  @@index([status])
  @@index([supplierBusinessNo])
  @@index([buyerBusinessNo])
  @@map("tax_invoices")
}

model TaxInvoiceItem {
  id            String   @id @default(cuid())
  taxInvoiceId  String
  itemDate      DateTime
  itemName      String
  specification String?
  quantity      Decimal
  unitPrice     Decimal
  supplyAmount  Decimal
  taxAmount     Decimal
  remark        String?

  // Relations
  taxInvoice TaxInvoice @relation(fields: [taxInvoiceId], references: [id], onDelete: Cascade)

  @@index([taxInvoiceId])
  @@map("tax_invoice_items")
}

enum TaxInvoiceStatus {
  DRAFT
  ISSUED
  MODIFIED
  CANCELLED
}

enum InvoiceType {
  TAX_INVOICE // 세금계산서
  RECEIPT // 영수증
  CASH_RECEIPT // 현금영수증
  SIMPLIFIED // 간이세금계산서
}

enum InvoiceStatus {
  PENDING
  ISSUED
  SENT
  PAID
  CANCELLED
  OVERDUE
}

// PRICE GROUPS (B2B Pricing)
model PriceGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  priority    Int      @default(0) // Higher priority overrides lower
  isActive    Boolean  @default(true)
  conditions  Json? // Dynamic conditions for auto-assignment
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members PriceGroupMember[]
  rules   PriceRule[]

  @@index([priority])
  @@map("price_groups")
}

model PriceGroupMember {
  id                String   @id @default(cuid())
  priceGroupId      String
  businessAccountId String
  createdAt         DateTime @default(now())

  // Relations
  priceGroup      PriceGroup      @relation(fields: [priceGroupId], references: [id])
  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id])

  @@unique([priceGroupId, businessAccountId])
  @@map("price_group_members")
}

model PriceRule {
  id           String        @id @default(cuid())
  priceGroupId String
  productId    String? // Null means applies to all products
  categoryId   String? // Null means applies to all categories
  type         PriceRuleType
  value        Decimal // Percentage or fixed amount
  minQuantity  Int           @default(1)
  maxQuantity  Int?
  startDate    DateTime?
  endDate      DateTime?
  priority     Int           @default(0)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  priceGroup PriceGroup @relation(fields: [priceGroupId], references: [id])
  product    Product?   @relation(fields: [productId], references: [id])
  category   Category?  @relation(fields: [categoryId], references: [id])

  @@index([priceGroupId])
  @@index([productId])
  @@index([categoryId])
  @@map("price_rules")
}

enum PriceRuleType {
  PERCENTAGE_DISCOUNT
  FIXED_DISCOUNT
  FIXED_PRICE
  TIERED_PRICING
}

// BULK ORDERS (B2B)
model BulkOrder {
  id                String          @id @default(cuid())
  businessAccountId String
  status            BulkOrderStatus @default(DRAFT)
  estimatedAmount   Decimal?
  finalAmount       Decimal?
  requestedDate     DateTime
  confirmedDate     DateTime?
  notes             String?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id])
  items           BulkOrderItem[]

  @@index([status])
  @@map("bulk_orders")
}

enum BulkOrderStatus {
  DRAFT
  SUBMITTED
  REVIEWING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
  CANCELLED
}

model BulkOrderItem {
  id             String   @id @default(cuid())
  bulkOrderId    String
  productId      String
  quantity       Int
  requestedPrice Decimal?
  approvedPrice  Decimal?
  notes          String?

  // Relations
  bulkOrder BulkOrder @relation(fields: [bulkOrderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("bulk_order_items")
}

// ADVANCED INVENTORY MANAGEMENT
model InventoryLocation {
  id        String       @id @default(cuid())
  name      String
  code      String       @unique
  type      LocationType
  address   String?
  isActive  Boolean      @default(true)
  priority  Int          @default(0) // For fulfillment priority
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  inventories Inventory[]
  snapshots   InventorySnapshot[]
  transfers   InventoryTransfer[] @relation("FromLocation")
  receipts    InventoryTransfer[] @relation("ToLocation")

  @@map("inventory_locations")
}

enum LocationType {
  WAREHOUSE
  STORE
  DROPSHIP
  VIRTUAL
}

model InventoryTransfer {
  id             String         @id @default(cuid())
  fromLocationId String
  toLocationId   String
  productId      String
  quantity       Int
  status         TransferStatus @default(PENDING)
  initiatedBy    String
  approvedBy     String?
  completedAt    DateTime?
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  fromLocation InventoryLocation @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocation   InventoryLocation @relation("ToLocation", fields: [toLocationId], references: [id])
  product      Product           @relation(fields: [productId], references: [id])

  @@map("inventory_transfers")
}

enum TransferStatus {
  PENDING
  APPROVED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

model InventorySnapshot {
  id         String   @id @default(cuid())
  productId  String
  locationId String?
  quantity   Int
  reserved   Int
  available  Int
  timestamp  DateTime @default(now())
  reason     String? // Reason for snapshot

  // Relations
  product  Product            @relation(fields: [productId], references: [id])
  location InventoryLocation? @relation(fields: [locationId], references: [id])

  @@index([productId, timestamp])
  @@map("inventory_snapshots")
}

model InventoryReservation {
  id        String            @id @default(cuid())
  productId String
  userId    String?
  orderId   String?
  cartId    String?
  quantity  Int
  expiresAt DateTime
  status    ReservationStatus @default(ACTIVE)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])
  cart    Cart?   @relation(fields: [cartId], references: [id])

  @@index([expiresAt])
  @@index([status])
  @@map("inventory_reservations")
}

enum ReservationStatus {
  ACTIVE
  CONFIRMED
  EXPIRED
  CANCELLED
}

// BUSINESS INTELLIGENCE
model CustomerSegment {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  criteria    Json // Segmentation criteria
  type        SegmentType
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  members   CustomerSegmentMember[]
  campaigns MarketingCampaign[]

  @@map("customer_segments")
}

enum SegmentType {
  RFM // Recency, Frequency, Monetary
  DEMOGRAPHIC
  BEHAVIORAL
  GEOGRAPHIC
  CUSTOM
}

model CustomerSegmentMember {
  id         String    @id @default(cuid())
  segmentId  String
  userId     String
  score      Decimal? // Segment score/ranking
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?

  // Relations
  segment CustomerSegment @relation(fields: [segmentId], references: [id])
  user    User            @relation(fields: [userId], references: [id])

  @@unique([segmentId, userId])
  @@map("customer_segment_members")
}

model MarketingCampaign {
  id        String         @id @default(cuid())
  name      String
  segmentId String
  status    CampaignStatus
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime       @default(now())

  // Relations
  segment CustomerSegment @relation(fields: [segmentId], references: [id])

  @@map("marketing_campaigns")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// PRODUCT DISPLAY SYSTEM
model DisplayTemplate {
  id        String              @id @default(cuid())
  name      String
  type      DisplayTemplateType
  position  DisplayPosition
  config    Json // Display configuration
  schedule  Json? // Display schedule
  targeting Json? // Targeting rules
  isActive  Boolean             @default(true)
  priority  Int                 @default(0)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  sections       DisplaySection[]
  events         DisplayEvent[]
  abTestVariants DisplayABTestVariant[]

  @@index([position, isActive])
  @@index([priority])
  @@map("display_templates")
}

enum DisplayTemplateType {
  GRID // 그리드형
  LIST // 리스트형
  CAROUSEL // 캐러셀
  BANNER_GRID // 배너+그리드 조합
  MAGAZINE // 매거진 스타일
  CARD // 카드형
  TIMELINE // 타임라인형
  MASONRY // 매이슨리
  SPOTLIGHT // 스포트라이트
  HERO_PRODUCTS // 히어로 상품
}

enum DisplayPosition {
  HOME_MAIN // 홈 메인
  HOME_SUB // 홈 서브
  CATEGORY_TOP // 카테고리 상단
  CATEGORY_MID // 카테고리 중간
  SEARCH_RESULT // 검색 결과
  RECOMMENDATION // 추천 영역
  EVENT // 이벤트 페이지
  BRAND_SHOP // 브랜드샵
}

model DisplaySection {
  id         String   @id @default(cuid())
  title      String
  templateId String
  priority   Int      @default(0)
  metadata   Json? // Rules, auto-update settings
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  template DisplayTemplate @relation(fields: [templateId], references: [id])
  products Product[]

  @@index([templateId])
  @@index([priority])
  @@map("display_sections")
}

model DisplayEvent {
  id         String           @id @default(cuid())
  templateId String
  type       DisplayEventType
  productId  String?
  userId     String?
  orderId    String?
  sessionId  String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  createdAt  DateTime         @default(now())

  // Relations
  template DisplayTemplate @relation(fields: [templateId], references: [id])
  product  Product?        @relation(fields: [productId], references: [id])
  user     User?           @relation(fields: [userId], references: [id])
  order    Order?          @relation(fields: [orderId], references: [id])

  @@index([templateId, type])
  @@index([createdAt])
  @@index([userId])
  @@map("display_events")
}

enum DisplayEventType {
  IMPRESSION // 노출
  CLICK // 클릭
  CONVERSION // 전환
  WISHLIST // 위시리스트 추가
  CART_ADD // 장바구니 추가
}

// A/B Testing Models
model DisplayABTest {
  id              String          @id @default(cuid())
  name            String
  position        DisplayPosition
  status          ABTestStatus    @default(DRAFT)
  priority        Int             @default(0)
  startDate       DateTime
  endDate         DateTime?
  winnerVariantId String?
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  variants    DisplayABTestVariant[]
  assignments ABTestAssignment[]

  @@index([position, status])
  @@index([startDate, endDate])
  @@map("display_ab_tests")
}

enum ABTestStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

model DisplayABTestVariant {
  id         String   @id @default(cuid())
  testId     String
  templateId String
  name       String
  weight     Float // Traffic allocation percentage
  metrics    Json? // Performance metrics
  createdAt  DateTime @default(now())

  // Relations
  test        DisplayABTest      @relation(fields: [testId], references: [id])
  template    DisplayTemplate    @relation(fields: [templateId], references: [id])
  assignments ABTestAssignment[]

  @@unique([testId, name])
  @@map("display_ab_test_variants")
}

model ABTestAssignment {
  id         String   @id @default(cuid())
  testId     String
  variantId  String
  userId     String?
  sessionId  String?
  assignedAt DateTime @default(now())

  // Relations
  test    DisplayABTest        @relation(fields: [testId], references: [id])
  variant DisplayABTestVariant @relation(fields: [variantId], references: [id])
  user    User?                @relation(fields: [userId], references: [id])

  @@unique([testId, userId])
  @@unique([testId, sessionId])
  @@map("ab_test_assignments")
}

model Analytics {
  id        String        @id @default(cuid())
  type      AnalyticsType
  period    String // e.g., "2024-01", "2024-W01", "2024-Q1"
  metrics   Json // Flexible metrics storage
  metadata  Json?
  createdAt DateTime      @default(now())

  @@unique([type, period])
  @@index([type, period])
  @@map("analytics")
}

enum AnalyticsType {
  SALES_SUMMARY
  PRODUCT_PERFORMANCE
  CUSTOMER_BEHAVIOR
  CONVERSION_FUNNEL
  REVENUE_FORECAST
  INVENTORY_TURNOVER
  MARKETING_ROI
}

// CREDIT MANAGEMENT (B2B)
model CreditHistory {
  id                String     @id @default(cuid())
  businessAccountId String
  type              CreditType
  amount            Decimal
  balance           Decimal // Balance after this transaction
  orderId           String?
  description       String?
  createdAt         DateTime   @default(now())

  // Relations
  businessAccount BusinessAccount @relation(fields: [businessAccountId], references: [id])
  order           Order?          @relation(fields: [orderId], references: [id])

  @@index([businessAccountId])
  @@map("credit_histories")
}

enum CreditType {
  PURCHASE
  PAYMENT
  ADJUSTMENT
  REFUND
}

// Inventory base model (referenced in relations)
model Inventory {
  id         String   @id @default(cuid())
  productId  String
  locationId String
  quantity   Int
  reserved   Int      @default(0)
  available  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product  Product           @relation(fields: [productId], references: [id])
  location InventoryLocation @relation(fields: [locationId], references: [id])

  @@unique([productId, locationId])
  @@index([productId])
  @@index([locationId])
  @@map("inventory")
}

// ===== 오픈뱅킹 및 법인 입금 관련 =====

model BankAccount {
  id                String  @id @default(cuid())
  userId            String
  businessAccountId String?

  // 은행 정보
  bankCode          String
  bankName          String
  accountNumber     String
  accountHolderName String
  accountType       BankAccountType @default(CORPORATE)

  // 오픈뱅킹 정보
  fintechUseNum      String    @unique
  inquiryAgreeYn     Boolean   @default(false)
  inquiryAgreeDtime  DateTime?
  transferAgreeYn    Boolean   @default(false)
  transferAgreeDtime DateTime?

  // 계좌 상태
  isPrimary Boolean @default(false)
  isActive  Boolean @default(true)

  // 메타데이터
  balance    Decimal?
  lastSyncAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  businessAccount   BusinessAccount?   @relation(fields: [businessAccountId], references: [id])
  transactions      BankTransaction[]
  corporatePayments CorporatePayment[]

  @@unique([bankCode, accountNumber])
  @@index([userId])
  @@index([businessAccountId])
  @@index([bankCode])
  @@index([fintechUseNum])
  @@map("bank_accounts")
}

enum BankAccountType {
  INDIVIDUAL
  CORPORATE
}

model BankTransaction {
  id        String @id @default(cuid())
  accountId String

  // 거래 정보
  transactionDate   DateTime
  transactionTime   String
  transactionType   BankTransactionType
  transactionAmount Decimal
  balanceAfter      Decimal

  // 상대방 정보
  counterpartyName     String?
  counterpartyAccount  String?
  counterpartyBankCode String?

  // 메타 정보
  transactionMemo   String?
  bankTransactionId String  @unique
  apiTransactionId  String?

  createdAt DateTime @default(now())

  // Relations
  account BankAccount @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([bankTransactionId])
  @@index([transactionDate])
  @@index([transactionType])
  @@map("bank_transactions")
}

enum BankTransactionType {
  DEPOSIT
  WITHDRAWAL
}

model CorporatePayment {
  id                String  @id @default(cuid())
  businessAccountId String?

  // 은행 정보
  bankCode        String
  accountNumber   String
  transactionDate DateTime
  transactionType BankTransactionType @default(DEPOSIT)

  // 입금 정보
  depositorName    String
  depositorAccount String?
  amount           Decimal
  balanceAfter     Decimal

  // 매칭 정보
  matchedOrderId String?
  matchingStatus PaymentMatchingStatus @default(UNMATCHED)
  matchingScore  Decimal               @default(0)

  // 메타 정보
  transactionMemo   String?
  bankTransactionId String  @unique
  rawData           String? // JSON string

  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  businessAccount BusinessAccount?     @relation(fields: [businessAccountId], references: [id])
  matchedOrder    Order?               @relation(fields: [matchedOrderId], references: [id])
  bankAccount     BankAccount?         @relation(fields: [bankCode, accountNumber], references: [bankCode, accountNumber])
  matchingLogs    PaymentMatchingLog[]

  @@index([bankTransactionId])
  @@index([matchingStatus])
  @@index([transactionDate])
  @@index([businessAccountId])
  @@index([matchedOrderId])
  @@map("corporate_payments")
}

enum PaymentMatchingStatus {
  UNMATCHED
  AUTO_MATCHED
  MANUAL_MATCHED
}

model PaymentMatchingLog {
  id            String   @id @default(cuid())
  paymentId     String
  orderId       String
  matchingType  String // AUTO, MANUAL
  matchingScore Decimal
  userId        String // 작업한 사용자
  reason        String?
  createdAt     DateTime @default(now())

  // Relations
  payment CorporatePayment @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([orderId])
  @@index([createdAt])
  @@map("payment_matching_logs")
}